<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.babmukja.repository.mapper.AdminMapper">

	<resultMap id="MemberMap" type="Member">
		<result column="mem_no" property="memNo" />
		<result column="mem_name" property="memName" />
		<result column="mem_phone" property="memPhone" />
		<result column="mem_email" property="memEmail" />
		<result column="mem_nickname" property="memNickname" />
		<result column="mem_pass" property="memPass" />
		<result column="post_no" property="postNo" />
		<result column="addr_default" property="addrDefault" />
		<result column="addr_detail" property="addrDetail" />
		<result column="manager_at" property="managerAt" />
		<result column="img_orgname" property="imgOrgname" /> 
		<result column="img_sysname" property="imgSysname" />
		<result column="sign_date" property="signDate" />
		<result column="last_date" property="lastDate" />
		<result column="social_at" property="socialAt" />
		<result column="point" property="point" />
		<result column="grade_no" property="gradeNo" />
		<result column="gradename" property="gradeName" />		
		<result column="img_path" property="imgPath" />
		<result column="recipe_cnt" property="recipeCnt" />
		<result column="selling_cnt" property="sellingCnt" />		
		<result column="totalBuy" property="totalBuy" />
		<result column="totalSel" property="totalSel" />		
		<result column="order_no" property="orderNo" />		
		<result column="sell_mem_no" property="sellMemNo" />		
		<result column="but_mem_no" property="buyMemNo" />		
		<result column="tot_count" property="totCount" />		
		<result column="get_" property="get" />		
		<result column="order_sum" property="orderSum" />		
		<result column="delivery_no" property="deliveryNo" />		
	</resultMap>	

	<sql id="searchWhere">
		<choose>
           <when test="searchType == 'memName'">
               and mem_name like concat('%', #{input}, '%')
            </when>
            <when test="searchType == 'memId'">
               and mem_id like concat('%', #{input}, '%')
            </when>
            <when test="searchType == 'memNickname'">
               and mem_nickname like concat('%', #{input}, '%')
            </when>
            <when test="searchType == 'memEmail'">
               and mem_email like concat('%', #{input}, '%')
            </when>
            <otherwise></otherwise>
         </choose>
      	      <if test="signDate1 != null and signDate1 != ''">
		     <![CDATA[
	           and sign_date >= STR_TO_DATE(#{signDate1}, '%Y-%m-%d') + interval -1 day
			   and sign_date <= STR_TO_DATE(#{signDate2},'%Y-%m-%d') + interval 1 day
			 ]]>            	
         	</if>
            <if test="lastDate1 != null and lastDate1 != ''">
		     <![CDATA[
	           and last_date >= STR_TO_DATE(#{lastDate1}, '%Y-%m-%d %H:%i:%s') + interval -1 day
			   and last_date <= STR_TO_DATE(#{lastDate2},'%Y-%m-%d %H:%i:%s') + interval +1 day
			 ]]>            	
         	</if> 
      	      <if test="totalBuy1 != null and totalBuy1 != '' ">
		     <![CDATA[
	           and totalBuy >= #{totalBuy1}
			   and totalBuy <= #{totalBuy2}
			 ]]>            	
         	</if>
      	      <if test="totalSel1 != null and totalSel1 != '' ">
		     <![CDATA[
	           and totalSel >= #{totalSel1}
			   and totalSel <= #{totalSel2}
			 ]]>            	
         	</if>
      	      <if test="recipeCnt1 != null and recipeCnt1 != '' ">
		     <![CDATA[
	           and recipe_cnt >= #{recipeCnt1}
			   and recipe_cnt <= #{recipeCnt2}
			 ]]>            	
         	</if>
      	      <if test="recipeCnt1 != null and recipeCnt1 != '' ">
		     <![CDATA[
	           and selling_cnt >= #{sellingCnt1}
			   and selling_cnt <= #{sellingCnt2}
			 ]]>            	
         	</if>
      	      <if test="point1 != null and point1 != '' ">
		     <![CDATA[
	           and point >= #{point1}
			   and point <= #{point2}
			 ]]>            	
         	</if>
      	    <choose>
           <when test="gradeType == 'newMem'">    
           		and m.grade_no = 0           
            </when>
            <when test="gradeType == 'normalMem'">     
            	and m.grade_no = 1            
            </when>
            <when test="gradeType == 'goodMem'">    
            	and m.grade_no = 2           
            </when>
            <when test="gradeType == 'bestMem'"> 
           		and m.grade_no = 3               
            </when>
            <otherwise></otherwise>
         </choose>
	</sql>
	
    <!-- 회원 전체목록 페이징추가 -->
	<select id="selectMemberList" parameterType="page" resultMap="MemberMap">		 
		select m.* , g.gradename
	      from (select a.*, 	           
	                   (select sum(order_sum) from tb_order where buy_mem_no = a.mem_no) 'totalBuy',
	                   (select sum(order_sum) from tb_order where sell_mem_no = a.mem_no) 'totalSel' 
	              from tb_member a) m, tb_grademap g
	     where m.grade_no = g.grade_no		     
         <include refid="searchWhere"/>
         order by m.mem_no
	     limit #{begin}, #{end}
	</select> 
	
	<!-- 회원 전체수 -->
	<select id="selectMemberCount" parameterType="page" resultType="int">
		select count(*)
		  from (select a.*, 	           
	                   (select sum(order_sum) from tb_order where buy_mem_no = a.mem_no) 'totalBuy',
	                   (select sum(order_sum) from tb_order where sell_mem_no = a.mem_no) 'totalSel' 
	              from tb_member a) m
		 where 1=1 
		 <include refid="searchWhere"/>
	</select>
	
	<!-- 회원 상세조회 -->
     <select id="selectMemberByNo" parameterType="int" resultMap="MemberMap">
		select m.*, g.gradename, o.*
		  from (select a.*, 	           
	                   (select sum(order_sum) from tb_order where buy_mem_no = a.mem_no) 'totalBuy',
	                   (select sum(order_sum) from tb_order where sell_mem_no = a.mem_no) 'totalSel'	                   	                   
	              from tb_member a) m, tb_grademap g ,tb_order o
		 where m.grade_no = g.grade_no
		   and mem_no = #{memNo}
	</select>
	<!-- 게시판 전체 조회 -->
	<select id="selectBoardForRecipe">
		select * from tb_recipe
	</select>
	<select id="selectBoard">
	</select>
	
	
	<!--  pb store 부분-->
	<resultMap id="storepbMap" type="storePB">
		<result column="pb_no" property="pbNo" />
		<result column="name" property="name" />
		<result column="content" property="content" />
		<result column="price" property="price" />
		<result column="regdate" property="regDate" />
		<result column="mem_no" property="memNo" />
		<result column="viewcnt" property="viewCnt" />
		<result column="imgpath" property="imgPath" />
	</resultMap>
	<!--  pb 상품 전체조회( 관리자전용 ) -->
	<select id="selectAdminPBList" resultMap="storepbMap" parameterType="pagepb">
		select * 
	  	  from tb_pb
	 	 order by pb_no desc
	 	 limit #{begin}, #{end}
	</select>
	
	<select id="selectAdminPBListCount" resultType="int">
		select count(*)
		  from tb_pb
	</select>
	
	<!-- pb 상품 등록 (관리자 전용 )  -->
	<insert id="insertPBStore" parameterType="storePB">
		insert into tb_pb(
			mem_no, 
			name, 
			price,
			content,
			imgpath
		)
		values(
			3, 
			#{name}, 
			#{price},
			#{content},
			#{imgPath}
		)
	</insert>
	
	<!-- pb 상품 수정 (관리자 전용) -->
	<update id="updatePBStore" parameterType="storePB">
		update tb_pb
		   set name = #{name},
		       price = #{price},
		       content = #{content}
		 where pb_no = #{pbNo}		   
	</update>
	
	<select id="selectPBStoreByNo" parameterType="int" resultMap="storepbMap">
		select *
		  from tb_pb
		 where pb_no = #{pbNo}
	</select>
	
	<!-- pb 상품 삭제 (관리자 전용) -->
	<delete id="deletePBStore" parameterType="int">
		delete 
		  from tb_pb
		 where pb_no = #{pbNo}
	</delete>
</mapper>
